#!/usr/bin/env php
<?php

define('WORKING_INTERVAL', 2);
define('READY_RESEND', 5);

require(dirname(__FILE__).'/../vendor/autoload.php');
require(dirname(__FILE__).'/../lib/Zmsg.php');

function get_first_reader($socket, $timeout)
{
	$readable = $writable = array();
  $poll = new ZMQPoll();
	$poll->add($socket, ZMQ::POLL_IN);

	if($poll->poll($readable, $writeable, $timeout))
		return array_shift($readable);
}

$options = new \Ergo\Console\Options($argv,array(
	'--help','-h','--connect=NULL','--init=',':cmd'
));

// show help
if($options->has('-h','--help') || $options->errors())
{
	$options->printErrors();

	echo "\nusage: $argv[0] [..args] [cmd]\n\n";
  echo " --connect <broker>    : connect to broker, instead of localhost\n";
  echo " --init <cmd>          : command to run if cwd doesn't exist and needs initialization\n";
	echo " --help                : this documentation\n";
	echo "\n";
	exit(1);
}

$endpoint = $options->value('--connect') ?: 'tcp://localhost:2225';
$identity = trim(`hostname`)."#worker".getmypid();

printf("Connecting to %s for tests\n", $endpoint);

$context = new ZMQContext();
$worker = $context->getSocket(ZMQ::SOCKET_DEALER);
$worker->setSockOpt(ZMQ::SOCKOPT_IDENTITY, $identity);
$worker->connect($endpoint);

$running = true;
$lastready = false;
$cwd = getcwd();

while($running)
{
	// wait till we get a test
	$zmsg = new Zmsg($worker);
	$zmsg->body_set('RDY');
	$zmsg->send();
	$lastready = time();

	while(!($reader = get_first_reader($worker, 1000)))
	{
		if((time()-$lastready) > READY_RESEND)
		{
			$worker->send("RDY");
			$lastready = time();
		}
	}

	// wait till we get a test
	$zmsg = new Zmsg($worker);
	$zmsg->recv();

	if(!preg_match('/^CMD (.+?)$/', $zmsg->body(), $m))
	{
		$zmsg->body_set("WTF");
		$zmsg->send(false);
		continue;
	}

	$body = $m[1];
	$req = json_decode($body);
	$hash = substr(sha1($body),0,7);

	// check the cwd directory asked for exists
	if(isset($req->cwd) && !is_dir($req->cwd))
	{
		// let the broker know we don't have that path
		$zmsg->body_set("NFI $hash");
		$zmsg->send(false);

		if($options->has('--init'))
		{
			$sem = sem_get(crc32($req->cwd), 1);

			// use a posix semaphore to protect dog piling
			sem_acquire($sem);
			clearstatcache();

			// we're the first, initialize it
			if(!is_dir($req->cwd))
			{
				printf("%s doesn't exist, initializing with %s\n",
					$req->cwd, $options->value('--init'));

				passthru(
					sprintf('%s %s',$options->value('--init'), escapeshellarg($req->cwd)),
					$return
				);

				if($return !== 0)
					die("Init script failed");
			}

			sem_release($sem);
		}
		else
		{
			printf("No init script, %s doesn't exist\n", $req->cwd);
			continue;
		}
	}

	// let the broker know we are still working
	$zmsg->body_set("QUE $hash");
	$zmsg->send(false);

	$timer = microtime(true);
	$stdout = NULL;
	$dir = isset($req->cwd) ? realpath($req->cwd) : $cwd;
	$cmd = ($options->has(':cmd'))
		? $options->value(':cmd') . " {$req->cmd}" : $req->cmd;

	assert(is_dir($dir));
	echo "C: $cmd (in $dir)\n";

	$proc = proc_open(
		"$cmd 2>&1",
		array(1=>array('pipe','w')),
		$pipes,
		$dir
	);

	stream_set_blocking($pipes[1], 0); // non-blocking
	$sockets = array($pipes[1]);

	while(!feof($pipes[1]))
	{
		if(stream_select($r = $sockets, $w = NULL, $error = NULL, WORKING_INTERVAL))
			$stdout .= fgets($pipes[1], 4096);

		// let the broker know we are still working
		$zmsg->body_set("WRK $hash");
		$zmsg->send(false);
	}

	echo "$stdout\n";

	fclose($pipes[1]);
	$exitcode = proc_close($proc);

	$r = array(
		'hash'=>$hash,
		'exit'=>$exitcode,
		'stdout'=>$stdout,
		'time'=>round((microtime(true)-$timer)*1000, 4),
	);

	$zmsg->body_set('RES '.json_encode($r));
	$zmsg->send();
}

$env->destroy();
