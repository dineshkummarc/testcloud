#!/usr/bin/env php
<?php

define('QUEUE_TIMEOUT', 5);
define('WORKER_EXPIRE', 5);

require(dirname(__FILE__).'/../vendor/autoload.php');
require(dirname(__FILE__).'/../lib/Zmsg.php');

$options = new \Ergo\Console\Options($argv,array(
	'--help','-h','--upstream?=NULL','--workers?=tcp://*:2225','--clients?=tcp://*:2224'
));

// show help
if($options->has('-h','--help') || $options->errors())
{
	$options->printErrors();

	echo "\nusage: $argv[0] [..args] testfile\n\n";
	echo " --help             : this documentation\n";
	echo " --upstream addr    : connect to an upstream broker\n";
	echo " --workers addr     : where to listen for workers\n";
	echo " --clients addr     : where to listen for clients\n";
	echo "\n";
	exit(1);
}

$context = new ZMQContext();

if($options->has('--upstream'))
{
	$frontend = new ZMQSocket($context, ZMQ::SOCKET_DEALER);
	$frontend->setSockOpt(ZMQ::SOCKOPT_IDENTITY, trim(`hostname`)."#broker".getmypid());
	$frontend->connect($upstreamConnect = $options->value('--upstream'));
	echo "Connecting upstream to $upstreamConnect\n";
}
else
{
	$frontend = new ZMQSocket($context, ZMQ::SOCKET_ROUTER);
	$frontend->bind($clientBind = $options->value("--clients"));
	echo "Listening for clients on $clientBind\n";
}

$backend = new ZMQSocket($context, ZMQ::SOCKET_ROUTER);
$backend->bind($workerBind = $options->value("--workers"));
echo "Listening for workers on $workerBind\n";

$workers = array();
$pending = array();

while(true)
{
	$readable = $writable = array();
  $poll = new ZMQPoll();

  // poll front-end only if we have available workers
  if(count($workers) > 0)
    $poll->add($frontend, ZMQ::POLL_IN);

  $poll->add($backend, ZMQ::POLL_IN);
  $events = $poll->poll($readable, $writeable, 1000);

	foreach($readable as $socket)
	{
		$zmsg = new Zmsg($socket);
		$zmsg->recv();

		if($socket === $backend)
		{
			$identity = $zmsg->unwrap();
			printf("W (%s): %s\n", $identity, $zmsg->body());

			// control messages from the worker
			if($zmsg->parts() == 1 && $zmsg->address() == 'RDY')
			{
				$workers [] = array($identity, time());
			}
			else
			{
				if(preg_match('/^(QUE|WRK) (.+?)$/', $zmsg->body(), $m))
				{
					$pending[$m[2]][2] = time();
				}
				else if(preg_match('/^RES (.+?)$/', $zmsg->body(), $m))
				{
					$resp = json_decode($m[1]);
					unset($pending[$resp->hash]);
				}
			}

			$zmsg->set_socket($frontend)->send();
		}
		else if($socket === $frontend)
		{
			printf("C: %s\n", $zmsg->body());
			$worker = array_shift(array_shift($workers));

			if(preg_match('/^CMD (.+?)$/', $zmsg->body(), $m))
			{
				$hash = substr(sha1($m[1]), 0, 7);
				$pending[$hash] = array(clone $zmsg, $worker, microtime(true)*1000);
			}

			$zmsg->wrap($worker, "");
			$zmsg->set_socket($backend)->send();
		}
	}

	// expire worker references before follow up READY
	foreach($workers as $idx=>$w)
	{
		if((time() - $w[1]) > WORKER_EXPIRE)
			unset($workers[$idx]);
	}

	// requeue commands that have timed out
	foreach($pending as $hash=>$entry)
	{
		if((time() - $entry[2]) > QUEUE_TIMEOUT && count($workers))
		{
			$worker = array_shift(array_shift($workers));
			$pending[$hash] = array(clone $entry[0], $worker, time());

			$entry[0]->wrap($worker, "");
			$entry[0]->set_socket($backend)->send();
		}
	}
}

