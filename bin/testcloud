#!/usr/bin/env php
<?php

require(dirname(__FILE__).'/../vendor/autoload.php');
require(dirname(__FILE__).'/../lib/Zmsg.php');
require(dirname(__FILE__).'/../lib/ANSIColor.php');

define('POLL_TIMEOUT', 1000);

$opts = new \Ergo\Console\Options($argv,array(
	'--help','-h','-v','--brief,-b','--connect,-c=tcp://localhost:2224',
	'--slow,-s=null','--failonly,-f','--progress,-p',
	':dir'
));

// show help
if($opts->has('-h','--help') || $opts->errors())
{
	$opts->printErrors();

	echo "\nusage: $argv[0] [workingdir] [..args]\n\n";

	echo " --help             : this documentation\n";
	echo " --connect addr     : connect to a specific broker, defaults to tcp://localhost:2224\n";
	echo " --brief -b         : display only a brief summary of each command\n";
	echo " --slow millis      : shows tests that take more than N milliseconds to run as slow\n";
	echo " --failonly -f      : show only failures\n";
	echo " --progress -p      : show an ansi progress meter\n";
	echo "\n";
	exit(1);
}

/**
 * Render a testcloud response
 * @return string
 */
function render_result($cmd, $resp, $brief=false, $slow=false)
{
	$c = new ANSIColor();

	$output = $resp->exit === 0
		? $c->bold_brightgreen("OK! ").$c->green("{$cmd} ")
		: $c->bold_red("FAIL({$resp->exit}) ").$c->red("{$cmd} ")
		;

	if($slow && $resp->time > $slow)
		$output .= $c->underline_red(sprintf("⌚%.2fms\n", $resp->time));
	else
		$output .= $c->white(sprintf("⌚%.2fms\n", $resp->time));

	if(!$brief) $output .= "{$resp->stdout}\n";

	return "\033[K".$output;
}

/**
 * Render a progress bar
 */
function display_progress($x, $n, $timer)
{
	$ratio = $x/$n;
	$percent = ceil($ratio*100);
	$elapsed = microtime(true)-$timer;

	printf("%d%% complete, %.2fs elapsed, %.2f per/s",
		$percent, $elapsed,
		($x==0 ? 0 : $x/$elapsed)
	);

	printf(" [%-40s]\n", str_repeat('=', ceil(39 * $ratio)).'>');
	echo "\033[1A"; // up 1 line

	if($x == $n)
		echo "\n";
}

// hide the cursor
echo "\033[?25l";
register_shutdown_function(function(){
	echo "\033[?25h";
});

// load testcloud.json
if(file_exists('testcloud.json'))
{
	if($config = json_decode(file_get_contents('testcloud.json')))
		$connect = $config->connect;
}

if($opts->has('--connect') && isset($connect))
	$connect = $opts->value('--connect');

// test client
$context = new ZMQContext();
$client = new ZMQSocket($context, ZMQ::SOCKET_DEALER);
$client->setSockOpt(ZMQ::SOCKOPT_IDENTITY, trim(`hostname`)."#client".getmypid());
$client->connect($connect);

if($opts->has('-v'))
	printf("Connecting to %s\n", $connect);

$timer = microtime(true);
$commands = array();
$results = array();
$output = new ANSIColor();
$success = true;
$queued = array();

while(($line = trim(fgets(STDIN))) || count($queued) > 0)
{
	// buffer stdin commands
	if($line)
		$commands []= $line;

	$read = $write = array();
	$poll = new ZMQPoll();
	$poll->add($client, ZMQ::POLL_IN);

	if(count($commands))
		$poll->add($client, ZMQ::POLL_OUT);

	$poll->poll($read, $write, 1000);

	// read some replies
	foreach($read as $socket)
	{
		$line = $socket->recv();

		if(preg_match('/^RES (.+?)$/', $line, $m))
		{
			$resp = json_decode($m[1]);

			// in some failure scenarios, we get a 2+ responses
			if(!isset($queued[$resp->hash]))
				continue;

			$req = $queued[$resp->hash]->req;

			if($resp->exit !== 0 || !$opts->has('-f'))
			{
				echo render_result($req->cmd, $resp, $opts->has('-b'), $opts->value('-s'));
				$success = $success && ($resp->exit === 0);
			}

			if($opts->has('-p'))
			{
				display_progress(
					count($results),
					count($commands)+count($results)+count($queued),
					$timer
				);
			}

			unset($queued[$resp->hash]);
			$results [$resp->hash] = $resp;
		}
		else if(preg_match('/^(WRK|QUE) (.+?)$/', $line, $m))
		{
			// do nothing
		}
		else
		{
			die("Unknown response $line");
		}
	}

	// send some commands
	foreach($write as $socket)
	{
		$req = (object) array(
			'cmd'=>array_shift($commands), 'cwd'=>$opts->value(':dir') ?: getcwd()
		);

		if($opts->has('-v'))
			printf("Sending: {$req->cmd}\n");

		$json = json_encode($req);
		$socket->send("CMD $json");

		$hash = substr(sha1($json),0,7);
		$queued[$hash] = (object) array('req'=>$req, 'sent'=>time());
	}
}

// calculate a summary
ksort($results);
$outputhash = NULL;

foreach($results as $result)
	$outputhash = sha1($outputhash.$result->hash.$result->stdout.$result->exit);

echo "\033[K";

echo $success
	? $output->underline_green("All commands successfully executed ☃\n")
	: $output->underline_red("Some commands failed :(\n")
	;

printf("Ran %d commands in ⌚%.2fs, result hash is %s\n",
	count($results), microtime(true)-$timer, $outputhash);

exit($success ? 0 : 1);
