#!/usr/bin/env php
<?php

require(dirname(__FILE__).'/../vendor/autoload.php');
require(dirname(__FILE__).'/../lib/Zmsg.php');
require(dirname(__FILE__).'/../lib/ANSIColor.php');

define('POLL_TIMEOUT', 1000);

$options = new \Ergo\Console\Options($argv,array(
	'--help','-h','-v','--brief','-b','--connect=tcp://localhost:2224','--slow?=null',':dir'
));

// show help
if($options->has('-h','--help') || $options->errors())
{
	$options->printErrors();

	echo "\nusage: $argv[0] [workingdir] [..args]\n\n";

	echo " --help             : this documentation\n";
	echo " --connect addr     : connect to a specific broker, defaults to tcp://localhost:2224\n";
	echo " --brief -b         : display only a brief summary of each command\n";
	echo " --slow millis      : shows tests that take more than N milliseconds to run as slow\n";
	echo "\n";
	exit(1);
}

// test client
$context = new ZMQContext();
$client = new ZMQSocket($context, ZMQ::SOCKET_DEALER);
$client->setSockOpt(ZMQ::SOCKOPT_IDENTITY, trim(`hostname`)."#client".getmypid());
$client->connect($options->value('--connect'));

if($options->has('-v'))
	printf("Connecting to %s\n", $options->value('--connect'));

$timer = microtime(true);
$commands = array();
$queued = array();
$pending = array();
$results = array();
$output = new ANSIColor();
$success = true;

while(($line = trim(fgets(STDIN))) || count($queued) || count($pending))
{
	// buffer stdin commands
	if($line)
		$commands []= $line;

	$read = $write = array();
	$poll = new ZMQPoll();
	$poll->add($client, ZMQ::POLL_IN);

	if(count($commands) && !count($queued))
		$poll->add($client, ZMQ::POLL_OUT);

	$poll->poll($read, $write, 1000);

	// read some replies
	foreach($read as $socket)
	{
		$line = $socket->recv();

		if(preg_match('/^QUEUED (.+?)$/', $line, $m))
		{
			$req = json_decode($m[1]);
			unset($queued[$req->cmd]);
			$pending[$req->cmd] = microtime(true);
		}
		else if(preg_match('/^RESULT (.+?)$/', $line, $m))
		{
			$rep = json_decode($m[1]);
			$results[$rep->cmd] = $rep;

			if($rep->exitcode === 0)
			{
				echo $output->bold_brightgreen("OK! ");
				echo $output->green("{$rep->cmd} ");
			}
			else
			{
				echo $output->bold_brightred("FAIL({$rep->exitcode}) ");
				echo $output->red("{$rep->cmd} ");
				$success = false;
			}

			if($options->has('--slow') && $rep->time > $options->value('--slow'))
				echo $output->underline_red(sprintf("⌚%.2fms\n", $rep->time));
			else
				echo $output->white(sprintf("⌚%.2fms\n", $rep->time));

			if(!$options->has('--brief','-b'))
				printf("%s\n", $rep->stdout);

			unset($pending[$rep->cmd]);
		}
		else
		{
			die("Unknown response $line");
		}
	}

	// send some commands
	foreach($write as $socket)
	{
		$req = array('cmd'=>array_shift($commands), 'cwd'=>$options->value(':dir') ?: getcwd());

		if($options->has('-v'))
			printf("Sending: {$req['cmd']}\n");

		$socket->send(json_encode($req));
		$queued[$req['cmd']] = microtime(true);
	}
}

// calculate a summary
ksort($results);
$outputhash = array();

foreach($results as $result)
	$outputhash = sha1($outputhash.$result->cmd.$result->exitcode.$result->stdout);

echo $success
	? $output->underline_green("All commands successfully executed ☃\n")
	:  $output->underline_red("Some commands failed :(\n")
	;

printf("Ran %d commands in ⌚%.2fs, result hash is %s\n",
	count($results), microtime(true)-$timer, $outputhash);
